21
S' S G Fdec Sdef Fdef Typ Args Args' Body Fields Trail Decl Stmt Init Exp Simple Else Smpopt Expopt Lv 
S' -> S $ ;
S -> G S ;
S -> nil ;
G -> Fdec ;
G -> Sdef ;
G -> Fdef ;
G -> %typedef Typ ID %; ;
Fdec -> Typ ID %( Args %) %; ;
Fdef -> Typ ID %( Args %) %{ Body %} ;
Sdef -> %struct ID %{ Fields %} %; ;
Typ -> STYP Trail ;
Typ -> STRCT ID Trail ;
Typ -> ID Trail ;
Trail -> %* Trail ;
Trail -> %[ %] Trail ;
Trail -> nil ;
Args -> Typ ID Args' ;
Args -> nil ;
Args' -> %, Typ ID Args' ;
Args' -> nil ;
Fields -> Typ ID %; Fields ;
Fields -> nil ;
Body -> Decl Body ;
Body -> Stmt Body ;
Body -> nil ;
Decl -> Typ ID Init %; ;
Init -> %= Exp ;
Init -> nil ;
Stmt -> Simple %; ;
Stmt -> %if %( Exp %) Stmt Else ;
Stmt -> %while %( Exp %) Stmt ;
Stmt -> %for %( Smpopt %; Exp %; Smpopt %) Stmt ;
Stmt -> %continue %; ;
Stmt -> %break %; ;
Stmt -> %return Expopt %; ;
Stmt -> %{ Body %} ;
Stmt -> %assert %( Exp %, Exp %) %; ;
Else -> %else Stmt ;
Else -> nil ;
Smpopt -> Simple ;
Smpopt -> nil ;
Expopt -> Exp ;
Expopt -> nil ;
Simple -> Lv ASOP Exp ;
Simple -> Lv %++ ;
Simple -> Lv %-- ;
Simple -> Exp ;
Lv -> ID ;
Lv -> Lv %. ID ;
Lv -> Lv %-> ID ;
Lv -> %* Lv ;
Lv -> Lv %[ Exp %] ;
Exp -> %( Exp %) ;
Exp -> DEC ;
Exp -> HEX ;
Exp -> STR ;
Exp -> CHR ;
Exp -> %true ;
Exp -> %false ;
Exp -> %NULL ;
Exp -> Exp BINOP Exp ;
Exp -> Exp %* Exp ;
Exp -> Exp %- Exp ;
Exp -> UNOP Exp ;
Exp -> %- Exp ;
Exp -> Exp %? Exp %: Exp ;
Exp -> ID %( Args %) ;
Exp -> Lv ;
Exp -> %alloc %( Typ %) ;
Exp -> %alloc_array %( Typ %, Exp %) ;
